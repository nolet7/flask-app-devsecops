---
name: DevSecops_CI_Pipeline_Full

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Flake8
        run: pip install flake8
      - name: Create Flake8 Config
        run: |
          echo "[flake8]" > .flake8
          echo "max-line-length = 120" >> .flake8
          echo "exclude = __init__.py" >> .flake8
      - name: Run lint
        run: |
          if [ -f .flake8 ]; then
            flake8 --config=.flake8 flask-app/*.py
          else
            echo "Flake8 config not found!" && exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install test dependencies only
        run: |
          echo "APP_SECRET_KEY=testing-secret" >> $GITHUB_ENV
          echo "APP_USERNAME=admin" >> $GITHUB_ENV
          echo "APP_PASSWORD=adminpass" >> $GITHUB_ENV
          pip install flask pytest python-dotenv
      - name: Run unit tests
        env:
          PYTHONPATH: ./flask-app
        run: pytest flask-app/tests/

  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Bandit
        run: pip install bandit
      - name: Run Bandit for SAST
        run: |
          bandit -r flask-app -f json -o bandit-report.json || true
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run pip-audit for SCA
        run: pip-audit -r flask-app/requirements.txt

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test, sast, sca]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t flask-app:latest ./flask-app
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-app:latest'
          format: 'table'
          exit-code: '0'
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Tag and Push to Docker Hub
        run: |
          docker tag flask-app:latest ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Tag and Push to GitHub Container Registry
        run: |
          docker tag flask-app:latest ghcr.io/${{ github.repository_owner }}/flask-app:latest
          docker push ghcr.io/${{ github.repository_owner }}/flask-app:latest
      - name: Save image as artifact
        run: docker save flask-app:latest -o flask-app.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-image
          path: flask-app.tar

  dast:
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: "http://192.168.0.191:5000/login"
          fail_action: false
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          cmd_options: "-a"
